plugins {
    id("antlr")
    id("java-library")
    id("maven-publish")
    id("signing")
    id("com.diffplug.spotless") version "6.11.0"
    id("com.github.hierynomus.license-report") version "0.16.1"
    id("io.spring.dependency-management") version "1.0.14.RELEASE"
    id("net.ltgt.errorprone") version "3.0.1"
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

description = "A parser for Tom\"s Obvious, Minimal Language (TOML)."

repositories { mavenCentral() }

dependencyManagement {
    dependencies {
        dependency("com.google.errorprone:error_prone_core:2.16")
        dependency("com.google.errorprone:javac:9-dev-r4023-3")
        dependencySet(group: "org.antlr", version: "4.11.1") {
            entry "antlr4"
            entry "antlr4-runtime"
        }
        dependency("org.checkerframework:checker-qual:3.21.2")
        dependencySet(group: "org.junit.jupiter", version: "5.9.1") {
            entry "junit-jupiter-api"
            entry "junit-jupiter-engine"
            entry "junit-jupiter-params"
        }
    }
}

apply from: "${rootDir}/gradle/check-licenses.gradle"

//////
// Version numbering

def versionNumber = "1.1.0"
version = versionNumber + buildTag()

static String buildTag() {
    if (System.getenv("BUILD_RELEASE") == "true") {
        return ""
    }
    if (System.getenv("CIRCLECI")) {
        def buildNumber = System.getenv("CIRCLE_SHA1").take(4).toUpperCase() +
                String.format("%02X", System.getenv("CIRCLE_BUILD_NUM").toInteger() % 256, 16)
        return "" - "" + buildNumber + "-snapshot"
    }
    return "-dev"
}

//////
// Default tasks and build aliases

defaultTasks 'build', 'checkLicenses', 'javadoc'

def buildAliases = ['dev': [
        'spotlessApply',
        'build',
        'checkLicenses',
        'javadoc'
]]

def expandedTaskList = []
gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten()

//////
// Source formatting

spotless {
    java {
        target project.fileTree(rootDir) {
            include 'src/**/*.java'
            exclude '**/generated-src/**/*.*'
        }
        licenseHeaderFile rootProject.file('gradle/spotless.license.java')
        eclipse().configFile(rootProject.file('gradle/eclipse-java-style.xml'))
        importOrder 'org.tomlj', 'java', ''
        endWithNewline()
    }
}

//////
// Source generation

generateGrammarSource {
    outputDirectory file("${buildDir}/generated-src/antlr/main/org/tomlj/internal")
    arguments << "-package" << "org.tomlj.internal" << "-visitor" << "-long-messages"
    arguments << "-Xexact-output-dir"
}

configurations {
    api {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

//////
// Compilation

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))

    withJavadocJar()
    withSourcesJar()
}

javadoc { exclude '**/internal/**' }

sourcesJar.dependsOn generateGrammarSource

tasks.withType(JavaCompile) {
    // Until https://github.com/gradle/gradle/issues/2510 is resolved and
    // something like a `releaseCompability` property is added, we have to add
    // the --release flag explicitly
    if (JavaVersion.current() > JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
    options.compilerArgs += [
            '-Xlint:unchecked',
            '-Xlint:cast',
            '-Xlint:rawtypes',
            '-Xlint:overloads',
            '-Xlint:divzero',
            '-Xlint:finally',
            '-Xlint:static',
            '-Werror'
    ]

    options.errorprone {
        excludedPaths = '.*/generated-src/.*'
        disableWarningsInGeneratedCode = true
    }
}

//////
// Testing

tasks.withType(Test) {
    // If GRADLE_MAX_TEST_FORKS is not set, use half the available processors
    maxParallelForks = (System.getenv('GRADLE_MAX_TEST_FORKS') ?:
            (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)).toInteger()
}

test { useJUnitPlatform() }

//////
// Dependencies

dependencies {
    errorprone("com.google.errorprone:error_prone_core")
    if (JavaVersion.current().isJava8()) {
        errorproneJavac("com.google.errorprone:javac")
    }

    antlr 'org.antlr:antlr4'

    implementation 'org.antlr:antlr4-runtime'
    implementation 'org.checkerframework:checker-qual'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

//////
// Packaging

ext.moduleName = "org.tomlj"

jar {
    destinationDirectory = file("${rootProject.buildDir}/libs")
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': moduleName)
    }
}

shadowJar {
    configurations = [
            project.configurations.compileClasspath
    ]
    dependencies {
        exclude(dependency("org.checkerframework:checker-qual"))
    }
    exclude "**/pom.xml"
    exclude "**/pom.properties"
    relocate "org.antlr", "org.tomlj.internal.antlr"
    minimize()
    manifest {
        attributes "Description": "This archive embeds a copy of the required ANTLR4 runtime library"
    }
}

dependencyManagement {
    generatedPomCustomization {
        enabled = false
    }
}

publishing {
    publications {
        tomljLibrary(MavenPublication) {
            from components.java
            groupId "org.tomlj"
            artifactId project.archivesBaseName
            version project.version
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult("")
                }
            }
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/tomlj/tomlj"
                packaging = "jar"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "scm:https://github.com/tomlj/tomlj.git"
                    developerConnection = "scm:git@github.com:tomlj/tomlj.git"
                    url = "https://github.com/tomlj/tomlj"
                }
                developers {
                    developer {
                        name = "Chris Leishman"
                        email = "chris@leishman.org"
                    }
                    developer {
                        name = "Tobias Schmidt"
                        email = "tobias.schmidt24080878@gmail.com"
                    }
                }
            }
        }
    }
    if (System.getenv("MAVEN_CENTRAL_DEPLOY") == "true") {
        repositories {
            maven {
                credentials {
                    username = "$ossrhUsername"
                    password = "$ossrhPassword"
                }
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    useGpgCmd()
    sign publishing.publications.tomljLibrary
}

tasks.withType(Sign) {
    onlyIf { System.getenv("ENABLE_SIGNING") == "true" }
}

model {
    tasks.generatePomFileForTomljLibraryPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
